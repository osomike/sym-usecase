# This is a basic workflow to help you get started with Actions

name: deploy-pipeline

# Controls when the workflow will run
on:

  workflow_dispatch:
    inputs:
      deploy-to:
        type: choice
        description: Environment to which the code will be deployed
        options:
          - dev
          - prd
        required: true
        default: dev

env:
  PYTHON_VERSION: '3.10'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  deploy-code:

    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: ${{ inputs.deploy-to }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out source code
        uses: actions/checkout@v4

      - name: Setup Python version
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install curl unzip -y
          python -m pip install --upgrade pip
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh

      - name: Verify installations
        run: |
          databricks --version

      - name: List clusters
        env:
          DATABRICKS_HOST: ${{ vars.AZURE_DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          databricks repos list
          databricks clusters list

      - name: Clean folder
        run: |
          echo "Cleaning folder /Shared/pipeline/"
          databricks workspace delete --recursive /Shared/pipeline/

      - name: Copy content to databricks workspace
        env:
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }} 
        run: |
          echo "Copying content from $BRANCH_NAME to folder /Shared/pipeline/"
          databricks workspace import-dir ./src/ /Shared/pipeline/
